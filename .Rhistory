xpathSApply(doc, '//item/source', xmlGetAttr)
xpathSApply(doc, '//item/source', xmlGetAttr, 'url')
# Function that fetches the data available
# in HealthMap's website and transforms
# the results into a data table.
scrapeHealthMap <- function() {
cat('----------------------------------------\n')
cat("Collecting the table from HealthMap.\n")
cat('----------------------------------------\n')
# HealthMap RSS feed
url = 'http://healthmap.org/rss/ebola-all.rss'
# getting the html
doc <- xmlInternalTreeParse(url)
# collecting the data into a data.frame
output <- data.frame(
title = xpathSApply(doc, '//item/title', xmlValue),
publication_date = xpathSApply(doc, '//item/pubDate', xmlValue),
source_url = xpathSApply(doc, '//item/source', xmlGetAttr, 'url'),
author = xpathSApply(doc, '//item/author', xmlValue),
country = xpathSApply(doc, '//item/category[@domain="location"]', xmlValue),
latitude = xpathSApply(doc, '//item/geo:lat', xmlValue),
longitude = xpathSApply(doc, '//item/geo:lon', xmlValue),
description = xpathSApply(doc, '//item/description', xmlValue)
)
# returning results
cat('-------------------------------\n')
cat('Done!\n')
cat('-------------------------------\n')
return(output)
}
# running
healthMapData <- scrapeHealthMap()
xpathSApply(doc, '//item/author', xmlValue)
xpathSApply(doc, '//item/category[@domain="location"]', xmlValue)
xpathSApply(doc, '//item/geo:lat', xmlValue)
xpathSApply(doc, '//item/geo:lon', xmlValue)
xpathSApply(doc, '//item/geo:long', xmlValue)
xpathSApply(doc, '//item/description', xmlValue)
# Function that fetches the data available
# in HealthMap's website and transforms
# the results into a data table.
scrapeHealthMap <- function() {
cat('----------------------------------------\n')
cat("Collecting the table from HealthMap.\n")
cat('----------------------------------------\n')
# HealthMap RSS feed
url = 'http://healthmap.org/rss/ebola-all.rss'
# getting the html
doc <- xmlInternalTreeParse(url)
# collecting the data into a data.frame
output <- data.frame(
title = xpathSApply(doc, '//item/title', xmlValue),
publication_date = xpathSApply(doc, '//item/pubDate', xmlValue),
source_url = xpathSApply(doc, '//item/source', xmlGetAttr, 'url'),
author = xpathSApply(doc, '//item/author', xmlValue),
country = xpathSApply(doc, '//item/category[@domain="location"]', xmlValue),
latitude = xpathSApply(doc, '//item/geo:lat', xmlValue),
longitude = xpathSApply(doc, '//item/geo:long', xmlValue),
description = xpathSApply(doc, '//item/description', xmlValue)
)
# returning results
cat('-------------------------------\n')
cat('Done!\n')
cat('-------------------------------\n')
return(output)
}
# running
healthMapData <- scrapeHealthMap()
View(healthMapData)
setwd("~/Documents/Programming/hdx-timeline")
library(rjson)
library(RCurl)
library(rjson)
library(RCurl)
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc[1])
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc$result[1])
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc$result[i]$timestamp)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc[i]$timestamp)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc$result[i]$timestamp)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc$result[i])
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
print(doc$result[[i]]$timestamp)
}
calculateBarGraph()
Sys.time()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp))
current_time = Sys.time()
r = current_time - timestamp
print(r)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
current_time = Sys.time()
r = current_time - timestamp
print(r)
}
calculateBarGraph()
?Sys.time()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
print(r)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
print(timestamp)
print(current_time)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp, tz = 'Europe/Luxembourg')
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
print(timestamp)
print(current_time)
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp, tz = 'Europe/Luxembourg')
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
print(format(timestamp))
print(format(current_time))
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp, tz = 'Europe/Luxembourg')
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
print(doc$result[[i]]$timestamp)
print(format(timestamp))
print(format(current_time))
}
calculateBarGraph()
as.POSIXct("2014-11-13T19:20:27.149592")
as.POSIXlt("2014-11-13T19:20:27.149592")
as.POSIXct.numeric("2014-11-13T19:20:27.149592")
as.POSIXct("2014-11-13T19:20:27.149592")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%Y")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%Y")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %h")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%m")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%M")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%m")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%m:%s")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%m")
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%m", tz = 'Europe/Paris')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%m-%d, %H:%m", tz = 'Europe/Luxembourg')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%M-%d, %H:%m", tz = 'Europe/Luxembourg')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%b-%d, %H:%m", tz = 'Europe/Luxembourg')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%B %d, %H:%m", tz = 'Europe/Luxembourg')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%B %d, %H:%m", tz = 'Americas/New York')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%B %d, %H:%m", tz = 'Americas/New_York')
format(as.POSIXct("2014-11-13T19:20:27.149592"), "%B %d, %H:%m", tz = 'America/New_York')
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp, tz = 'Europe/Luxembourg')
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
a = format(timestamp, "%B %d, %H:%m", tz = 'America/New_York')
print(a)
print(format(timestamp))
print(format(current_time))
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
a = format(timestamp, "%B %d, %H:%m", tz = 'America/New_York')
print(a)
print(format(timestamp))
print(format(current_time))
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
a = format(timestamp, "%B %d, %H:%m", tz = 'America/New_York')
print(a)
print(format(timestamp))
print(format(current_time))
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
i = 1
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# calculating change
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
current_time = as.POSIXct(Sys.time(), tz = 'Europe/Luxembourg')
r = current_time - timestamp
a = format(timestamp, "%B %d, %H:%m", tz = 'America/New_York')
print(as.Date(timestamp))
print(format(timestamp))
print(format(current_time))
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
# url to query
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# parsing results
for (i in 1:length(doc$result)) {
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
print(as.Date(timestamp))
}
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 10) {
# url to query
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# parsing results
for (i in 1:length(doc$result)) {
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
print(as.Date(timestamp))
}
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
# url to query
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# parsing results
for (i in 1:length(doc$result)) {
print(doc$result)
timestamp = as.POSIXct(doc$result[[i]]$timestamp)
print(as.Date(timestamp))
}
}
calculateBarGraph()
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
# url to query
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# parsing results
for (i in 1:length(doc$result)) {
it <- data.frame(dataset_name = doc$result[[i]]$data$package$name,
timestamp = as.POSIXct(doc$result[[i]]$timestamp),
activity_type = doc$result[[i]]$activity_type)
# building data.frame
if (i == 1) out <- it
else out <- rbind(out, it)
}
# results
return(out)
}
x <- calculateBarGraph()
View(x)
x <- calculateBarGraph(l = 100)
View(x)
# Function to calculate the bar-graph
calculateBarGraph <- function(minutes = 5, l = 1) {
# url to query
url = paste0('https://data.hdx.rwlabs.org/api/action/recently_changed_packages_activity_list?limit=', l)
doc = fromJSON(getURL(url))
# parsing results
total = length(doc$result)
pb <- txtProgressBar(min = 0, max = total, style = 3, char = ".")
for (i in 1:total) {
setTxtProgressBar(pb, i)
it <- data.frame(dataset_name = doc$result[[i]]$data$package$name,
timestamp = as.POSIXct(doc$result[[i]]$timestamp),
activity_type = doc$result[[i]]$activity_type)
# building data.frame
if (i == 1) out <- it
else out <- rbind(out, it)
}
# results
return(out)
}
x <- calculateBarGraph(l = 100)
View(x)
x <- calculateBarGraph(l = 10000)
x <- calculateBarGraph(l = 1000)
View(x)
library(ggplot2)
library(ggplot2)
names(x)
ggplot(x) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin')
ggplot(x) + theme_bw() +
geom_bar(aes(timestamp, fill = dataset_name), stat = 'bin')
ggplot(x) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin')
x <- calculateBarGraph(l = 10000)
library(ggplot2)
ggplot(x) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin')
ggplot(x) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin') +
facet_wrap(~ activity_type)
names(x)
head(x)
sub <- x[x$timestamp > as.Date('2014-08-31'), ]
sub <- x[x$timestamp > as.POSIXct('2014-08-31'), ]
nrow(sub)
View(sub)
ggplot(sub) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin') +
facet_wrap(~ activity_type)
ggplot(sub) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin')
sub <- x[x$timestamp > as.POSIXct('2014-09-31'), ]
sub <- x[x$timestamp > as.POSIXct('2014-09-30'), ]
ggplot(sub) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin')
library(ggplot2)
setwd("~/Documents/Programming/hdx-sparklines")
cases <- read.csv('cases.csv')
fts <- read.csv('fts.csv')
View(fts)
View(cases)
names(cases)
sub_cases <- cases[cases$Indicator == 'Cumulative Cases of Ebola' |
cases$Indicator == 'Cumulative Deaths from Ebola'  , ]
nrow(sub_cases)
sub_cases <- cases[cases$Indicator == 'Cumulative Cases of Ebola', ]
nrow(sub_cases)
summary(cases$Indicator)
sub_cases <- cases[cases$Indicator == 'Cumulative number of confirmed Ebola cases' |
cases$Indicator == 'Cumulative number of confirmed Ebola deaths', ]
nrow(sub_cases)
names(sub_cases)
as.Date(sub_cases$Date)
sub_cases$Date <- as.Date(sub_cases$Date)
ggplot(sub_cases) + theme_bw() +
geom_line(aes(Date, value), stat = 'identity')
names(sub_cases)
ggplot(sub_cases) + theme_bw() +
geom_line(aes(Date, value), stat = 'identity') +
facet_wrap(. ~ Indicator)
ggplot(sub_cases) + theme_bw() +
geom_line(aes(Date, value), stat = 'identity') +
facet_wrap( ~ Indicator)
ggplot(sub_cases) + theme_bw() +
geom_path(aes(Date, value), stat = 'identity') +
facet_wrap( ~ Indicator)
summary(sub_cases$Country)
ggplot(sub_cases) + theme_bw() +
geom_path(aes(Date, value, color = Country), stat = 'identity') +
facet_wrap( ~ Indicator)
ggplot(sub_cases) + theme_bw() +
geom_path(aes(Date, value, color = Country), stat = 'identity', position="stack") +
facet_wrap( ~ Indicator)
x <- calculateBarGraph(l = 20000)
ggplot(x) + theme_bw() +
geom_bar(aes(timestamp, fill = activity_type), stat = 'bin')
source('code/write_tables.R')
setwd("~/Documents/Programming/hdx-timeline")
source('code/write_tables.R')
View(data)
View(x)
data <- x
names(data)
y <- tapply(data$activity_type, data$timestamp, sum)
y <- tapply(data$activity_type, data$timestamp, summary)
y
y <- tapply(data$timestamp, data$activity_type, table)
y
View()
View(y)
table(data$timestamp, data$activity_type)
y <- table(data$timestamp, data$activity_type)
View(y)
class(y)
y <- data.frame(table(data$timestamp, data$activity_type))
class(y)
View(y)
view(y)
View(y)
library(reshape2)
x <- dcast(y, date ~ variable)
names(y) <- c('date', 'variable', 'frequency')
x <- dcast(y, date ~ variable)
View(x)
View(out)
out <- dcast(totals, date ~ variable)
View(ouput)
View(output)
View(x)
out <- x
View(out)
writeTables(out, 'chages_type', 'scraperwiki')
onSw <- function(d = F, b = 'tool/') {
if (d == T) return(b)
else return('')
}
onSw(F)
onSw(T)
source(paste0(onSw(), 'code/write_tables.R'))
# sw deploy function
onSw <- function(d = T, b = 'tool/') {
if (d == T) return(b)
else return('')
}
source(paste0(onSw(), 'code/write_tables.R'))
# sw deploy function
onSw <- function(d = F, b = 'tool/') {
if (d == T) return(b)
else return('')
}
